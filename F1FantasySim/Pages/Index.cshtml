@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<body>
    <form method="post">
        <div class="budget-container">
            <label>Max Budget</label>
            <input asp-for="MaxBudget" /><br /><br />
        </div>

            
        <div class="tables-container row justify-content-center" @* style="display: flex; justify-content: space-around;" *@>
            <!-- Qualifying Results Table -->
            <div class="col-md-5 mx-auto">
            <button id="copyOrderToQualifying" style="float: right" type="button">Copy from Race ← </button>
                <h2 class="table-heading" style="text-align: center;">Qualifying</h2> <!-- This is the new heading for Qualifying -->
                <table class="table table-light table-striped table-hover" data-toggle="table">
                    <thead>
                        <tr>
                            <th data-sortable="true" data-sorter="numericSorter">Position</th> <!-- New Position Column -->
                            <th data-sortable="true">Name</th>
                            <th data-sortable="true">Team</th>
                            <th data-sortable="true" data-sorter="numericSorter">OverallPoints</th>
                            <th data-sortable="true" data-sorter="numericSorter">Value</th>
                            <th data-sortable="true" data-sorter="numericSorter">PPM</th>
                        </tr>
                    </thead>
                    <tbody id="sortable-qualifying">
                        @foreach (var obj in Model.Drivers)
                        {
                            <tr class="list-item" id="@obj.PlayerId">
                                <td class="position"></td> <!-- Placeholder for position value -->
                                <td class="w-40">@obj.DisplayName<input type="hidden" name="qualifyingIds" value="@obj.PlayerId"></td>
                                <td class="w-30">@obj.TeamName</td>
                                <td class="w-10">@obj.OverallPpints</td>
                                <td class="w-10">@obj.Value</td>
                                <td class="w-10">@{
                                        var pointsPerMillion = obj.Value > 0 ? @obj.PointsPerMill.ToString("F2") : "N/A";
                                    }@pointsPerMillion</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Race Results Table (Existing Table) -->
            <div class="col-md-5 mx-auto">
                <button id="copyOrderToRace" style="float: left display: inline-block; width: auto;" type="button">→ Copy from Qualifying</button>
                <h2 class="table-heading" style="text-align: center;">Race</h2> <!-- This is the new heading for Race -->
                <table class="table table-light table-striped table-hover" data-toggle="table">
                    <thead>
                        <tr>
                            <th data-sortable="true" data-sorter="numericSorter">Position</th> <!-- New Position Column -->
                            <th data-sortable="true" >Name</th>
                            <th data-sortable="true">Team</th>
                            <th data-sortable="true" data-sorter="numericSorter">OverallPoints</th>
                            <th data-sortable="true" data-sorter="numericSorter">Value</th>
                            <th data-sortable="true" data-sorter="numericSorter">PPM</th>
                        </tr>
                    </thead>
                    <tbody id="sortable">
                        @foreach (var obj in Model.Drivers)
                        {
                            <tr class="list-item" id="@obj.PlayerId">
                                <td class="position"></td> <!-- Placeholder for position value -->
                                <td class="w-40">@obj.DisplayName<input type="hidden" name="ids" value="@obj.PlayerId"></td>
                                <td class="w-30">@obj.TeamName</td>
                                <td class="w-10">@obj.OverallPpints</td>
                                <td class="w-10">@obj.Value</td>
                                <td class="w-10">@{var pointsPerMillion = obj.Value > 0 ? @obj.PointsPerMill.ToString("F2") : "N/A";}@pointsPerMillion</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

        </div>

        <input class="text-left btn btn-primary submit-button" type="submit" value="Submit" />
        <br />

        @if (Model.BestTeams != null && Model.BestTeams.Any())
        {
            <div>
                <br />
                <div class="col-md-10">
                    <table class="d-lg-table table table-light table-bordered">
                        <thead class="thead-dark">
                            <tr>
                                <th colspan="5">Drivers</th>
                                <th colspan="3">Constructors</th>
                                <th>Points</th>
                                <th>Price</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var team in Model.BestTeams)
                            {
                                <tr>
                                    @foreach (var driver in team.Drivers.Where(a => !a.ApiModel.IsConstructor()))
                                    {
                                        <td width="15%">
                                            @{
                                                string tooltip = $"Qualifying: {driver.Points.QualifyingPoints}&lt;br&gt;" +
                                                $"Race: {driver.Points.RacePoints}&lt;br&gt;" +
                                                $"Overtaking: {driver.Points.OvertakingPoints}";
                                                string txt = $"{driver.ApiModel.LastName} [{driver.Points.TotalPoints}]";
                                            }
                                            <!-- Here we use data-toggle and data-html to create a tooltip that renders HTML -->
                                            <span data-toggle="tooltip" data-html="true" title="@Html.Raw(tooltip)">
                                                @txt
                                            </span>
                                            @if (driver.IsTurboed)
                                            {
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-lightning" viewBox="0 0 16 16">
                                                    <span class="turbo-icon">⚡</span>
                                                </svg>
                                            }
                                            <text>&nbsp;</text>
                                        </td>
                                    }
                                    @foreach (var constructor in team.Constructors)
                                    {
                                        string constructorTooltip = $"Qualifying: {constructor.Points.QualifyingPoints}&lt;br /&gt;" +
                                                                    $"Race: {constructor.Points.RacePoints}&lt;br /&gt;" +
                                                                    $"Overtaking: {constructor.Points.OvertakingPoints}";
                                        string constructorName = constructor.ApiModel.FullName;
                                        string constructorPoints = $"[{constructor.Points.TotalPoints}]";
                                    
                                        <td>
                                            <span data-toggle="tooltip" data-html="true" title="@Html.Raw(constructorTooltip)">
                                                @constructorName @constructorPoints
                                            </span>
                                        </td>
                                    }
                                    <td>@team.Points</td>
                                    <td>@team.Price.ToString("F1")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>




                <!-- New Detailed Points Breakdown Tables -->
                <h2 class="table-heading">Detailed Points Breakdown</h2>

                <!-- Drivers Breakdown -->
                <h3 class="subheading">Drivers</h3>
                <table class="table table-light table-striped" data-toggle="table">
                    <thead>
                        <tr>
                            <th data-sortable="true" data-sorter="numericSorter">Driver</th>
                            <th data-sortable="true" data-sorter="numericSorter">Points Breakdown</th>
                            <th data-sortable="true" data-sorter="numericSorter">Total Points</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var driver in Model.DriverPoints)
                        {
                            <tr>
                                <td>@driver.ApiModel.DisplayName</td>
                                    <td>
                                        <span data-toggle="tooltip" data-html="true"
                                              title="@($"Qualifying: {driver.Points.QualifyingPoints}<br />Race: {driver.Points.RacePoints}<br />Overtaking: {driver.Points.OvertakingPoints}")">
                                            @driver.Points.QualifyingPoints
                                        </span>
                                    </td>
                                <td>@driver.Points.TotalPoints</td>
                            </tr>
                        }
                    </tbody>
                </table>

                <!-- Constructors Breakdown -->
                <h3 class="subheading">Constructors</h3>
                <table class="table table-light table-striped">
                    <thead>
                        <tr>
                            <th>Constructor</th>
                            <th>Points Breakdown</th>
                            <th>Total Points</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var constructor in Model.ConstructorPoints)
                        {
                            <tr>
                                <td>@constructor.ApiModel.DisplayName</td>
                                    <td>
                                        <span data-toggle="tooltip" data-html="true"
                                              title="@($"Qualifying: {constructor.Points.QualifyingPoints}<br />Race: {constructor.Points.RacePoints}<br />Overtaking: {constructor.Points.OvertakingPoints}")">
                                            @constructor.Points.QualifyingPoints
                                        </span>
                                    </td>
                                <td>@constructor.Points.TotalPoints</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </form>
</body>

@section Scripts{
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.24/themes/smoothness/jquery-ui.css" />
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.24/jquery-ui.min.js"></script>
<script type="text/javascript">
        $(function () {
            var fixHelperModified = function (e, tr) {
                var $originals = tr.children();
                var $helper = tr.clone();
                $helper.children().each(function (index) {
                    $(this).width($originals.eq(index).width())
                });
                return $helper;
            };

            $(document).ready(function () {
                $('[data-toggle="tooltip"]').tooltip();
            });


            $('[data-toggle="tooltip"]').tooltip({
                html: true, // Allow HTML in the tooltip
            });


            var updatePositions = function (selector) {
                $(selector).each(function (index) {
                    $(this).children('.position').html(index + 1);
                });
            };

            // Initialize sortable and update positions for the race results table
            $("#sortable").sortable({
                helper: fixHelperModified,
                cancel: ".ui-state-disabled",
                items: "tr:not(.ui-state-disabled)",
                update: function (event, ui) {
                    updatePositions("#sortable .list-item");
                }
            }).disableSelection();

            // Initialize sortable and update positions for the qualifying results table
            $("#sortable-qualifying").sortable({
                helper: fixHelperModified,
                cancel: ".ui-state-disabled",
                items: "tr:not(.ui-state-disabled)",
                update: function (event, ui) {
                    updatePositions("#sortable-qualifying .list-item");
                }
            }).disableSelection();

            // Initial position numbers
            updatePositions("#sortable .list-item");
            updatePositions("#sortable-qualifying .list-item");

            // Function to copy order from one table to another
            function copyOrder(sourceTableSelector, targetTableSelector) {
                var orderMap = [];

                $(sourceTableSelector + ' .list-item').each(function () {
                    var id = this.id; // Using the full ID as the identifier
                    orderMap.push(id);
                });

                orderMap.forEach(function (id) {
                    var rowToMove = $(targetTableSelector + ' .list-item#' + id).detach();
                    $(targetTableSelector).append(rowToMove);
                });

                // Update positions in the target table after copying the order
                updatePositions(targetTableSelector + ' .list-item');
                saveOrderToLocalStorage('#sortable', 'raceOrder');
                saveOrderToLocalStorage('#sortable-qualifying', 'qualifyingOrder');
            }


            $('#copyOrderToQualifying').click(function () {
                console.log('Copying order to Qualifying...');
                copyOrder('#sortable', '#sortable-qualifying');
            });

            $('#copyOrderToRace').click(function () {
                console.log('Copying order to Race...');
                copyOrder('#sortable-qualifying', '#sortable');
            });



            // --- Local Storage Functions ---
            function saveOrderToLocalStorage(tableSelector, storageKey) {
                var order = [];
                $(tableSelector + ' .list-item').each(function () {
                    order.push(this.id); // Assuming the ID is sufficient to identify the row
                });
                localStorage.setItem(storageKey, JSON.stringify(order));
            }

            // Example usage after updating the order in your sortable table:
            $("#sortable, #sortable-qualifying").on("sortupdate", function (event, ui) {
                saveOrderToLocalStorage('#sortable', 'raceOrder');
                saveOrderToLocalStorage('#sortable-qualifying', 'qualifyingOrder');
            });

            function applyOrderFromLocalStorage(tableSelector, storageKey) {
                var order = JSON.parse(localStorage.getItem(storageKey));
                if (!order) return; // If there's no order saved, do nothing

                order.forEach(function (id) {
                    var row = $(tableSelector + ' .list-item#' + id).detach();
                    $(tableSelector).append(row);
                });
            }

            // Example usage on page load:
            function applyOrderWithFallback(tableSelector, storageKey) {
                var storedOrder = JSON.parse(localStorage.getItem(storageKey));
                if (!storedOrder) return; // If there's no order saved, do nothing

                // Get current IDs from the table
                var currentIds = $(tableSelector + ' .list-item').map(function () {
                    return this.id;
                }).get();

                // Check for any IDs in the current table that are not in the stored order
                var isDiscrepancy = currentIds.some(id => !storedOrder.includes(id));

                if (isDiscrepancy) {
                    console.log("Discrepancy found. Using default order.");
                    // Optional: Apply a specific default order here if desired
                    return; // Exit the function without applying the stored order
                }

                // No discrepancy, apply the stored order
                storedOrder.forEach(function (id) {
                    var row = $(tableSelector + ' .list-item#' + id).detach();
                    $(tableSelector).append(row);
                });

                // Update positions after reordering
                updatePositions(tableSelector + ' .list-item');
            }

            function updatePositions(selector) {
                $(selector).each(function (index) {
                    // Update the text of the first cell (position number) to match the row's current index
                    $(this).find('td:first').text(index + 1);
                });
            }

            function observeTableChanges(tableSelector) {
                var tableElement = document.querySelector(tableSelector);

                // Create a new MutationObserver instance
                var observer = new MutationObserver(function (mutations) {
                    mutations.forEach(function (mutation) {
                        if (mutation.type === 'childList') {
                            // Call updatePositions whenever there are changes in the table's children (rows)
                            updatePositions(tableSelector + ' .list-item');
                        }
                    });
                });

                // Configuration object for the observer
                var config = { childList: true, subtree: true };

                // Start observing the target table for configured mutations
                observer.observe(tableElement, config);
            }

            // Call observeTableChanges for each table you want to observe
            $(document).ready(function () {
                observeTableChanges('#sortable');
                observeTableChanges('#sortable-qualifying');
            });

            $(document).ready(function () {
                applyOrderWithFallback('#sortable', 'raceOrder');
                applyOrderWithFallback('#sortable-qualifying', 'qualifyingOrder');
            });
        });

        function numericSorter(a, b) {
            a = parseFloat(a);
            b = parseFloat(b);

            if (isNaN(a)) {
                a = 0; // or a large negative number to ensure it sorts to the bottom
            }
            if (isNaN(b)) {
                b = 0; // or a large negative number to ensure it sorts to the bottom
            }

            console.log('numeric sorter');
            return a - b;
        }
</script>
}
<style>
    .table {
        width: 100%; /* Full width of the container */
        table-layout: auto; /* Adjust to 'auto' for automatic column sizing */
    }

        .table th, .table td {
            white-space: nowrap; /* Prevent wrapping */
            overflow: hidden; /* Hide overflow */
            text-overflow: ellipsis; /* Add ellipsis for overflowed content */
            padding: 8px; /* Adjust padding as needed */
        }

            /* Specific column width adjustments */
            .table th.position, .table td.position { /* Smaller width for Position column */
                width: 10%;
                max-width: 10%; /* Or set a fixed width if preferred */
                min-width: 30px; /* Minimum width */
            }

            .table th:nth-child(2), .table td:nth-child(2) { /* Larger width for Name column */
                width: 25%;
                max-width: 25%; /* Or set a fixed width if preferred */
                min-width: 100px; /* Minimum width */
            }

            .table th:nth-child(3), .table td:nth-child(3) { /* Adjust width for Team column */
                width: 20%;
                max-width: 20%; /* Or set a fixed width if preferred */
                min-width: 80px; /* Minimum width */
            }

            .table th:nth-child(4), .table td:nth-child(4), /* Width for OverallPoints column */
            .table th:nth-child(5), .table td:nth-child(5), /* Width for Value column */
            .table th:nth-child(6), .table td:nth-child(6) { /* Width for PPM column */
                width: 15%;
                max-width: 15%; /* Or set a fixed width if preferred */
                min-width: 50px; /* Minimum width */
            }

    .table-heading {
        width: 100%; /* Full width of the container */
        text-align: center;
        font-size: 24px; /* Adjust size as needed */
        margin-bottom: 10px; /* Space below the heading */
    }

    .tables-container {
        display: flex;
        justify-content: center;
        align-items: flex-start; /* this makes sure they align to the top */
        gap: 20px; /* Adjust the space between the tables */
        margin: 0 auto; /* Center the container */
        padding: 0; /* Reset padding */
    }

    .tables-container > div {
        margin: 0; /* Reset margin */
    }

    .budget-container {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    .submit-button {
        margin-bottom: 70px;
        padding: 15px 30px; /* Increase padding to make the button bigger */
        display: block; /* Make the button a block element so it can be centered */
        margin-left: auto; /* Center the button */
        margin-right: auto;
    }

    @@media (max-width: 992px) {
        .tables-container > div {
            padding: 0 15px; /* Add 15px padding to the left and right */
            max-width: none; /* Remove the max-width */
        }
    }

    .table {
        table-layout: fixed;
    }

    .copy-button {
        display: inline-block; /* Make the button an inline-block element */
        width: auto; /* Let the button size itself to fit its contents */
    }

</style>
